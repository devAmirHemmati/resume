{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ACTIVE_ASIDE, DE_ACTIVE_ASIDE, SWITCH_ACTIVE_ASIDE } from './types';\nconst initialState = {\n  active: false\n};\n\nconst AsideReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTIVE_ASIDE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        active: true\n      });\n\n    case DE_ACTIVE_ASIDE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        active: false\n      });\n\n    case SWITCH_ACTIVE_ASIDE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        active: !state.active\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default AsideReducer;","map":{"version":3,"sources":["/home/amir/Files/projects/resume/src/store/reducers/Aside/index.ts"],"names":["ACTIVE_ASIDE","DE_ACTIVE_ASIDE","SWITCH_ACTIVE_ASIDE","initialState","active","AsideReducer","state","action","type"],"mappings":";;;;;;AAIA,SACCA,YADD,EAECC,eAFD,EAGCC,mBAHD,QAIO,SAJP;AAMA,MAAMC,YAAyB,GAAG;AACjCC,EAAAA,MAAM,EAAE;AADyB,CAAlC;;AAIA,MAAMC,YAAY,GAAG,CACpBC,KAAK,GAAGH,YADY,EAEpBI,MAFoB,KAGH;AACjB,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKR,YAAL;AACC,6CACIM,KADJ;AAECF,QAAAA,MAAM,EAAE;AAFT;;AAKD,SAAKH,eAAL;AACC,6CACIK,KADJ;AAECF,QAAAA,MAAM,EAAE;AAFT;;AAKD,SAAKF,mBAAL;AACC,6CACII,KADJ;AAECF,QAAAA,MAAM,EAAE,CAACE,KAAK,CAACF;AAFhB;;AAKD;AACC,aAAOE,KAAP;AApBF;AAsBA,CA1BD;;AA4BA,eAAeD,YAAf","sourcesContent":["import {\n\tIAsideState,\n\ttAsideActionTypes,\n} from './@types';\nimport {\n\tACTIVE_ASIDE,\n\tDE_ACTIVE_ASIDE,\n\tSWITCH_ACTIVE_ASIDE,\n} from './types';\n\nconst initialState: IAsideState = {\n\tactive: false,\n};\n\nconst AsideReducer = (\n\tstate = initialState,\n\taction: tAsideActionTypes,\n): IAsideState => {\n\tswitch (action.type) {\n\t\tcase ACTIVE_ASIDE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tactive: true,\n\t\t\t};\n\n\t\tcase DE_ACTIVE_ASIDE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tactive: false,\n\t\t\t};\n\n\t\tcase SWITCH_ACTIVE_ASIDE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tactive: !state.active,\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default AsideReducer;\n"]},"metadata":{},"sourceType":"module"}