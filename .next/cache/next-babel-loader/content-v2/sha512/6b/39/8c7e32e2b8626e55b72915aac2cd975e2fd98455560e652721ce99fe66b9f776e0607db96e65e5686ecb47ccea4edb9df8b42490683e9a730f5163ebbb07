{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/amir/Files/projects/resume/src/components/Button/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst Button = (_ref) => {\n  let {\n    type = 'button',\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"type\", \"children\"]);\n\n  return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n    type: type\n  }, rest), {}, {\n    children: \"test\"\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 3\n  }, this);\n};\n\nexport default Button;","map":{"version":3,"sources":["/home/amir/Files/projects/resume/src/components/Button/index.tsx"],"names":["Button","type","children","rest"],"mappings":";;;;;;;;;;;;;AAGA,MAAMA,MAAwB,GAAG,UAI3B;AAAA,MAJ4B;AACjCC,IAAAA,IAAI,GAAG,QAD0B;AAEjCC,IAAAA;AAFiC,GAI5B;AAAA,MADFC,IACE;;AACL,sBACC;AAAQ,IAAA,IAAI,EAAEF;AAAd,KAAwBE,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CAVD;;AAYA,eAAeH,MAAf","sourcesContent":["import { FC } from 'react';\nimport { IButtonProps } from './types';\n\nconst Button: FC<IButtonProps> = ({\n\ttype = 'button',\n\tchildren,\n\t...rest\n}) => {\n\treturn (\n\t\t<button type={type} {...rest}>\n\t\t\ttest\n\t\t</button>\n\t);\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}